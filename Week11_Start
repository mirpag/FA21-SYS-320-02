# 1. Running processes and the path for each process
Get-Process | Select-Object ProcessName, Path

# 2. all registered services and the path to the executable controlling the service
Get-WmiObject -Class Win32_Service | Select-Object name, Path

# 3. all tcp network sockets
Get-NetTCPConnection

# 4. all user account information (use wmi)
Get-WmiObject -Class Win32_UserAccount | Select *

# 5. all network adapter configuration information
Get-WmiObject -Class Win32_NetworkAdapterConfiguration


# Use Powershell cmdlets to save 4 other artifacts that would be useful in an incident but only use Powershell cmdlets.  
# In your code comment, explain why you selected those four cmdlets and the value it would provide for an incident investigation.
https://www.hackingarticles.in/incident-response-windows-cheatsheet/

# 6. File share permissions
Get-SmbShare

# 7. Firewall Settings
netsh advfirewall show currentprofile

# Create a prompt that asks the user for the location of where to save the results for the commands above
# Select a way to use at least one function within your code.
function save_file() {
    clr

    # Let the user decide what they would like to name the file
    $nameFile = Read-Host -Prompt "What would you like to call this file? You can press 'q' to quit the program."
    
    # Check if the user wants to quit
    if ($nameFile -match "^[qQ]$" {
        # Stop executing the program and close the script
        break
    }

    # Let the user decide where they would like to save the file
    $readStatus = read-host -Prompt "Where would you like to save this file? Or, you can press 'q' to quit the program."

    # Check if the user wants to quit
    if ($readStatus -match "^[qQ]$" {
        # Stop executing the program and close the script
        break
    }

}


# Find the Powershell cmdlet that can create a 'FileHash' of the resulting CSV files, create a checksum for each one, and save the results to a file within the results directory.  
# The file containing checksums should have the filename and the corresponding checksum.
function file_hash() {
    
    $readFile = read-host -Prompt "What file would you like to obtain the hash for? You can press 'q' to quit the program."

    
    # Check if the user wants to quit
    if ($readStatus -match "^[qQ]$" {
        # Stop executing the program and close the script
        break
    }


    Get-FileHash -Path $readFile -Algorithm MD5
}

# Use the Powershell cmdlet Compress-Archive to zip the directory where the results are stored (ensure it has a .zip file extension).  
# NOTE: You will need to save the zip file outside of the directory where you store the results from the commands above.  
# Otherwise, you will receive an error because as the zip file is being created, it is open, and has a file lock.  You can't zip an open file on Windows.


# Create a checksum of the zipped file and save it to a file.


# Email zipped file to prof. Be sure your from address is your Champlain email address
function send_mail() {

    # email body
    $msg = "This is an email for Miranda Pagarelski's Week 11 assignment" # Make sure to add zipped file here!!!!!!!!!!

    Write-Host -BackgroundColor Red -ForegroundColor White $msg

    # Email from address
    $fromEmail = "miranda.pagarelski@mymail.champlain.edu"

    # Email To address
    $toEmail = "jletourneau@champlain.edu"

    # Sending the email
    Send-MailMessage -From $fromEmail -To $toEmail -Subject "Week 11 Assignment" -Body $msg -SmtpServer 192.168.6.71
}
